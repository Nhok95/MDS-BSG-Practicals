#
# Exercise descriptive analysis of genetic markers.
#
#
# First part: SNP Data
#
rm(list=ls())
filename <- url("http://www-eio.upc.es/~jan/Data/bsg/Chromosome1_CHBPopSubset.rda")
load(filename)
ls()
install.packages("genetics")
library(genetics)
dim(Ysub)
class(Ysub)
Ysub[1:5,1:5]
n <- nrow(Ysub)
p <- ncol(Ysub)
n
p
Ysub[Ysub=="NN"] <- NA
perc.mis <- 100*sum(is.na(Ysub))/(n*p)
perc.mis
SNP1 <- Ysub[,1]
SNP1
class(SNP1)
SNP1.g <- genotype(SNP1,sep="")
summary(SNP1.g)
SNP2 <- Ysub[,2]
SNP2.g <- genotype(SNP2,sep="")
summary(SNP2.g)
SNP3 <- Ysub[,3]
SNP3.g <- genotype(SNP3,sep="")
summary(SNP3.g)
nmis <- function(x) {
y <- sum(is.na(x))
return(y)
}
nmis.per.ind <- apply(Ysub,1,nmis)
pmis.per.ind <- 100*nmis.per.ind/p
plot(1:n,pmis.per.ind,xlab="Individual",ylab="Perc. Missing")
nmis.per.snp <- apply(Ysub,2,nmis)
pmis.per.snp <- 100*nmis.per.snp/n
plot(1:p,pmis.per.snp,xlab="SNP",ylab="Perc. Missing")
sum(nmis.per.snp==n)
x <- table(SNP3)
x
sum(x)
sum(x,na.rm=TRUE)
n
pC <- (2*x[1]+x[2])/(2*sum(x,na.rm=TRUE))
pT <- (2*x[3]+x[2])/(2*sum(x,na.rm=TRUE))
pC
pT
pC+pT
summary(SNP3.g)
Y2 <- Ysub[,nmis.per.snp < n]
dim(Y2)
is.na(Y2)
affirst <- function(x){
x <- genotype(x,sep="")
out <- summary(x)
af1 <- out$allele.freq[1,2]
return(af1)
}
affirst(Ysub[,1])
affirst(Ysub[,3])
af.first.allele <- apply(Y2,2,affirst)
af.first.allele
hist(af.first.allele)
maf <- function(x){
x <- genotype(x,sep="")
out <- summary(x)
af1 <- min(out$allele.freq[,2],na.rm=TRUE)
af1[af1==1] <- 0
return(af1)
}
maf.per.snp <- apply(Y2,2,maf)
hist(maf.per.snp)
#
# Second part: STR data
#
rm(list=ls())
filename <- url("http://www-eio.upc.es/~jan/Data/bsg/JapanaseSTRs.rda")
load(filename)
ls()
Japanese[1:5,1:10]
X <- Japanese[,6:ncol(Japanese)]
n <- nrow(X)/2
p <- ncol(X)
n
p
sum(X==-9)
X[X==-9] <- NA
sum(is.na(X))
class(X)
STR1 <- X[,1]
table(STR1,useNA="always")
length(unique(STR1))
n.alleles <- function(x) {
y <- length(unique(x[!is.na(x)]))
return(y)
}
n.alleles(STR1) # number of alleles
table(STR1) # allele counts
STR1 <- STR1[!is.na(STR1)]
na <- length(STR1)
na
index.1 <- seq(1,na,2)
index.2 <- seq(2,na,2)
allele.1 <- STR1[index.1]
allele.2 <- STR1[index.2]
allele.1
allele.2
allele.1n <- pmin(allele.1,allele.2)
allele.2n <- pmax(allele.1,allele.2)
allele.1n
allele.2n
individuals <- paste(allele.1n,allele.2n,sep="/")
individuals
g.counts <- table(individuals) # genotype counts
g.counts
unique(names(g.counts))
names(g.counts)
sum(g.counts)
# STR dataset
rm(list=ls())
library(HardyWeinberg)
# Load data
data(NistSTRs)
# the rownames of the object consist of identifiers for each individual
# successive columns represent the two alleles of an individual for each STR
X <- NistSTRs
# Question 2
n <- nrow(X) # number of individuals
p <- ncol(X)/2 # number of STRs
n
p
# There are 361 individuals and 29 STRs
# Question 3
# Function that determines the number of alleles for a STR.
n.alleles <- function(X, str.index) {
allele.1 <- as.list(X[,str.index])
allele.2 <- as.list(X[,(str.index+1)])
return(length(table(unlist(c(allele.1, allele.2))))) # number of alleles
}
n.alleles.per.str.list <- list()
str.index <- 1
for (str.num in 1:p) {
n.alleles.per.str.list  <- append(n.alleles.per.str.list, n.alleles(X, str.index))
str.index <- str.index + 2
}
n.alleles.per.str <- unlist(n.alleles.per.str.list)
# Basic descriptive statistics of the number of alleles
mean(n.alleles.per.str)
sd(n.alleles.per.str)
median(n.alleles.per.str)
max(n.alleles.per.str)
min(n.alleles.per.str)
# Question 4
barplot(table(n.alleles.per.str), xlab="Number of alleles", ylab="Number of STRs")
# The most common number of alleles for an STR is 8
# Question 5: Compute the expected heterozygosity for each STR
exp.heter <- function(X, str.index) {
allele.1 <- as.list(X[,str.index])
allele.2 <- as.list(X[,(str.index+1)])
t <- table(unlist(c(allele.1, allele.2)))
sum.t <- sum(unname(t)) # we sum the counts
exp.heter <- round(1 - sum(sapply(unname(t), function(x) (x / sum.t)^2 )), 3)
return(exp.heter) # expected heterozygosity formula
}
exp.heter.per.str.list <- list()
str.index <- 1
for (str.num in 1:p) {
exp.heter.per.str.list  <- append(exp.heter.per.str.list, exp.heter(X, str.index))
str.index <- str.index + 2
}
exp.heter.per.str <- unlist(exp.heter.per.str.list)
hist(exp.heter.per.str, xlab="Expected heterozygosity", main="Histogram of the expected heterozygosity")
round(mean(exp.heter.per.str), 3) # average expected heterozygosity over all STRs
str.index <- 1
allele.1 <- X[,str.index]
allele.2 <- X[,str.index+1]
allele.1n <- pmin(allele.1,allele.2)
allele.2n <- pmax(allele.1,allele.2)
allele.1n == allele.2n
allele.1n != allele.2n
index_different <- allele.1n != allele.2n
allele.1n[index_different]
allele.2n[index_different]
individuals <- paste(allele.1n[index_different], allele.2n[index_different],sep="/")
individuals
g.counts <- table(individuals) # genotype counts
g.counts
individuals_heter <- paste(allele.1n[index_different], allele.2n[index_different],sep="/")
individuals_heter
individuals <- paste(allele.1n, allele.2n,sep="/")
sum(table(individuals))
g.heter.counts <- table(individuals_heter) # genotype counts
g.heter.counts
g.counts.sum <- sum(table(individuals))
g.heter.counts.sum <- table(individuals_heter) # genotype counts
g.heter.counts.sum
g.heter.counts.sum <- sum(table(individuals_heter)) # genotype counts
g.heter.counts.sum
Ho <- g.heter.counts.sum / g.counts.sum
Ho
obs.heter.per.str.list <- list()
str.index <- 1
for (str.num in 1:p) {
obs.heter.per.str.list  <- append(obs.heter.per.str.list, obs.heter(X, str.index))
str.index <- str.index + 2
}
obs.heter <- function(X, str.index) {
allele.1 <- X[,str.index]
allele.2 <- X[,str.index+1]
allele.1n <- pmin(allele.1,allele.2)
allele.2n <- pmax(allele.1,allele.2)
index_different <- allele.1n != allele.2n
individuals_heter <- paste(allele.1n[index_different], allele.2n[index_different],sep="/")
individuals_heter
individuals <- paste(allele.1n, allele.2n,sep="/")
g.counts.sum <- sum(table(individuals))
g.heter.counts.sum <- sum(table(individuals_heter))
g.heter.counts.sum
Ho <- g.heter.counts.sum / g.counts.sum
return(Ho)
}
obs.heter.per.str.list <- list()
str.index <- 1
for (str.num in 1:p) {
obs.heter.per.str.list  <- append(obs.heter.per.str.list, obs.heter(X, str.index))
str.index <- str.index + 2
}
obs.heter.per.str <- unlist(obs.heter.per.str.list)
obs.heter.per.str
Ho <- round(g.heter.counts.sum / g.counts.sum, 3)
return(Ho)
obs.heter <- function(X, str.index) {
allele.1 <- X[,str.index]
allele.2 <- X[,str.index+1]
allele.1n <- pmin(allele.1,allele.2)
allele.2n <- pmax(allele.1,allele.2)
index_different <- allele.1n != allele.2n
individuals_heter <- paste(allele.1n[index_different], allele.2n[index_different],sep="/")
individuals_heter
individuals <- paste(allele.1n, allele.2n,sep="/")
g.counts.sum <- sum(table(individuals))
g.heter.counts.sum <- sum(table(individuals_heter))
g.heter.counts.sum
Ho <- round(g.heter.counts.sum / g.counts.sum, 3)
return(Ho)
}
obs.heter.per.str.list <- list()
str.index <- 1
for (str.num in 1:p) {
obs.heter.per.str.list  <- append(obs.heter.per.str.list, obs.heter(X, str.index))
str.index <- str.index + 2
}
obs.heter.per.str <- unlist(obs.heter.per.str.list)
obs.heter.per.str
# Plot observed against expected heterozygosity, using all STRs
plot(x=exp.heter.per.str, y=obs.heter.per.str, xlab="Expected heterozygosity", ylab="Observed heterozygosity")
# Plot observed against expected heterozygosity, using all STRs
plot(x=exp.heter.per.str, y=obs.heter.per.str, xlab="Expected heterozygosity", ylab="Observed heterozygosity", main="Observed vs. Expected heterozygosity")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls(all.names = TRUE))
library(genetics)
library(dplyr)
library(fitdistrplus)
library(HardyWeinberg)
