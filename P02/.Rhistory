HWTernaryPlot(count_matrix)
m <- ncols(geneticData.poly)
count_matrix <- c(0,0,0)
names(count_matrix) <- c("A/A", "A/B", "B/B")
for (j in 1:m){
recoded <- dplyr::recode(geneticData.poly[[j]], `0`="AA", `1`="AB", `2`="BB")
count <- summary(genotype(recoded, sep=""))$genotype.freq[,"Count"]
count_matrix <- dplyr::bind_rows(count_matrix, count)
}
count_matrix <- data.table(count_matrix)
count_matrix <- setnafill(count_matrix, fill = 0)
count_matrix <- count_matrix[-1]
count_matrix <- UniqueGenotypeCounts(count_matrix)[,1:3]
HWTernaryPlot(count_matrix)
m <- ncol(geneticData.poly)
count_matrix <- c(0,0,0)
names(count_matrix) <- c("A/A", "A/B", "B/B")
for (j in 1:m){
recoded <- dplyr::recode(geneticData.poly[[j]], `0`="AA", `1`="AB", `2`="BB")
count <- summary(genotype(recoded, sep=""))$genotype.freq[,"Count"]
count_matrix <- dplyr::bind_rows(count_matrix, count)
}
count_matrix <- data.table(count_matrix)
count_matrix <- setnafill(count_matrix, fill = 0)
count_matrix <- count_matrix[-1]
count_matrix <- UniqueGenotypeCounts(count_matrix)[,1:3]
HWTernaryPlot(count_matrix)
m <- ncol(geneticData.poly)
count_matrix <- c(0,0,0)
names(count_matrix) <- c("A/A", "A/B", "B/B")
for (j in 1:m){
recoded <- dplyr::recode(geneticData.poly[[j]], `0`="AA", `1`="AB", `2`="BB")
count <- summary(genotype(recoded, sep=""))$genotype.freq[,"Count"]
count_matrix <- dplyr::bind_rows(count_matrix, count)
}
count_matrix <- data.table(count_matrix)
count_matrix <- setnafill(count_matrix, fill = 0)
count_matrix <- count_matrix[-1]
count_matrix <- UniqueGenotypeCounts(count_matrix)[,1:3]
HWTernaryPlot(count_matrix)
count_matrix
MakeCounts(geneticData.poly)
count_matrix <- MakeCounts(geneticData.poly)
count_matrix <- UniqueGenotypeCounts(count_matrix)[,1:3]
HWTernaryPlot(count_matrix)
count_matrix <- MakeCounts(geneticData.poly)
HWf(count_matrix)
X <- HWData(nm=100,n=1000)
fhat <- HWf(X)
fhat
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat)
hist(fhat, breaks=20)
hist(fhat, breaks=20)
hist(fhat, breaks=4)
hist(fhat, breaks=10)
hist(fhat, breaks=15)
hist(fhat, breaks=20)
hist(fhat, breaks=20)
hist(fhat, breaks=10)
hist(fhat, breaks=seq(-1, 1, 0.25))
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8))
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="cyan2")
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise")
summary(fhat)
desccribe(fhat)
desccribe(fhat)
describe(fhat)
library(Hmisc);describe(fhat)
library(psych);
describe(mydata)
library(psych);
describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise")
mean(fhat)
sd(fhat)
library(psych);psych::describe(fhat)
curve(dchisq(x, df = 2), from = 0, to = 40)
curve(dchisq(x, df = 10), from = 0, to = 40)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.175), xaxp=c(-1,1,16), c="turquoise")
mean(fhat)
sd(fhat)
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.175), xaxp=c(-1,1,16), c="turquoise")
hist(fhat, breaks=seq(-1, 1, 0.175), c="turquoise")
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise")
mean(fhat)
sd(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise")
library(psych);psych::describe(fhat)
curve(dchisq(x, df = 10), from = -1, to = 1)
density(fhat)
plot(density(fhat))
?density
plot(density(fhat, bw=6))
plot(density(fhat, bw=2))
plot(density(fhat, bw=1))
plot(density(fhat, bw=50))
plot(density(fhat, bw=1))
plot(density(fhat, bw=0.1))
plot(density(fhat, bw=0.01))
plot(density(fhat, bw=0.02))
plot(density(fhat, bw=0.1))
hist(fhat, c="turquoise")
hist(fhat, cut=50, c="turquoise")
?hist
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise")
lines(density(fhat)
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise")
lines(density(fhat)
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise")
lines(density(fhat))
library(psych);psych::describe(fhat)
lines(density(fhat))
lines(density(fhat))
lines(density(fhat))
lines(density(fhat))
density(fhat)
plot(density(fhat))
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise")
lines(density(fhat, bw=0.1))
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", prob=TRUE)
lines(density(fhat, bw=0.1))
library(psych);psych::describe(fhat)
curve(dnorm, -3.5, 3.5, lwd=2)
curve(dt, -3.5, 3.5, lwd=2)
curve(dt(df=2), -3.5, 3.5, lwd=2)
curve(dnorm(x, 0, 1), from=-1, to=1)
curve(dnorm(x, 0, 0.1), from=-1, to=1)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", prob=TRUE)
lines(density(fhat, bw=0.1))
library(psych);psych::describe(fhat)
curve(dnorm(x, 0, 0.1), from=-1, to=1)
curve(dnorm(x, 0, 0.1), from=-1, to=1, lt=2) # quite similar to a dnorm
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", prob=TRUE)
lines(density(fhat, bw=0.1))
curve(dnorm(x, 0, 0.1), from=-1, to=1, lt=2) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", prob=TRUE)
lines(density(fhat, bw=0.1))
curve(dnorm(x, 0, 0.1), from=-1, to=1, lt=2) # quite similar to a dnorm
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1))
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
curve(dnorm(x, 0, 0.1), from=-1, to=1, lt=2) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1))
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
curve(dnorm(x, 0, 0.1), from=-1, to=1, lt=2) # quite similar to a dnorm
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1))
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
curve(dnorm(x, 0, 0.1), from=-1, to=1) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1))
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
curve(dnorm(x, 0, 0.1), from=-1, to=1) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1))
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=T) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1))
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
lines(dnorm(x, 0, 0.1), xlim=c(-1, 1)) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1))
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
# lines(dnorm(x, 0, 0.1), xlim=c(-1, 1)) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
lines(dnorm(x, 0, 0.1), xlim=c(-1, 1)) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
lines(dnorm(x, 0, 0.1), xlim=c(-1, 1), lt=2) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(dnorm(x, 0, 0.1), xlim=c(-1, 1), lt=2) # quite similar to a dnorm
library(psych);psych::describe(fhat)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(dnorm(x, 0, 0.1), xlim=c(-1, 1), lt=2) # quite similar to a dnorm
dnorm(x, 0, 0.1)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
curve(dnorm(x, 0, 0.1)) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
curve(dnorm(x, 0, 0.1), from=-1, to=1) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
curve(dnorm(x, 0, 0.1), from=-1, to=1, lwd=2, add=TRUE) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1))
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1), lt=2, c="red")
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE, c="red") # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1), lt=2, c="red")
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1), lt=2)
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), ylim(c(0, 4)), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1), lt=2)
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), ylim=c(0, 4), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1), lt=2)
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), ylim=c(0, 4), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1), lt=2)
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
legend("topright", legend = c("Estimated density", "N(0,0.1)"), lty = c(1, 2), lwd = 2)
library(psych);psych::describe(fhat)
count_matrix <- MakeCounts(geneticData.poly)
fhat <- HWf(count_matrix)
hist(fhat, breaks=seq(-1, 1, 0.25), xaxp=c(-1,1,8), c="turquoise", xlim=c(-1, 1), ylim=c(0, 4), prob=TRUE)
lines(density(fhat, bw=0.1), xlim=c(-1, 1), lt=2)
curve(dnorm(x, 0, 0.1), from=-1, to=1, add=TRUE) # quite similar to a dnorm
legend("topright", legend = c("Estimated density", "N(0,0.1)"), lty = c(1, 2))
library(psych);psych::describe(fhat)
geneticData.poly[1:10]
nrow(geneticData.poly[1:10])
count_matrix_10_first <- MakeCounts(geneticData.poly[1:10])
count_matrix_10_first
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:10])
HWPerm(count_matrix_10_first)
geneticData.poly[,1:10]
count_matrix_10_first
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:10]))[,1:3]
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:10])[,1:3]
count_matrix_10_first
HWPerm(count_matrix_10_first)
names(count_matrix_10_first)
count_matrix <- MakeCounts(geneticData.poly)
count_matrix <- UniqueGenotypeCounts(count_matrix)[,1:3]
count_matrix %>% mutate(across(everything()), ~ HWTernaryPlot(.))
sapply(count_matrix, HWPerm(.))
sapply(count_matrix, function(x) HWPerm(x))
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:10])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
print(count_matrix_10_first[[i]])
}
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:10])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
print(count_matrix_10_first[i])
}
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:10])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
print(count_matrix_10_first[i,])
}
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:10])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
print(HWPerm(count_matrix_10_first[i,]))
}
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:10])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
pval <- HWPerm(count_matrix_10_first[i,])$pval
print(pval)
}
m <- 10
pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
pvals[i] <- HWPerm(count_matrix_10_first[i,])$pval
}
pvals
m <- 10
pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
pvals[i] <- HWPerm(count_matrix_10_first[i,], verbose=FALSE)$pval
}
pvals
m <- 10
pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
pvals[i] <- HWPerm(count_matrix_10_first[i,], verbose=FALSE)$pval
}
pvals
m <- 10
pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
pvals[i] <- HWPerm(count_matrix_10_first[i,], verbose=FALSE)$pval
}
pvals
library(genetics)
library(dplyr)
library(ggplot2)
library(fitdistrplus)
library(HardyWeinberg)
library(data.table)
set.seed(2209)
count_matrix <- MakeCounts(geneticData.poly)
count_matrix <- UniqueGenotypeCounts(count_matrix)[,1:3]
HWTernaryPlot(count_matrix)
m <- 10
pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
pvals[i] <- HWPerm(count_matrix_10_first[i,], verbose=FALSE)$pval
}
pvals
m <- 10
pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
pvals[i] <- HWPerm(count_matrix_10_first[i,], verbose=FALSE)$pval
}
pvals
HWExactStats(geneticData.poly)
count_matrix <- MakeCounts(geneticData.poly)
HWExactStats(count_matrix)
alpha <- 0.05
count_matrix <- MakeCounts(geneticData.poly)
exact_test_pvals <- HWExactStats(count_matrix)
sum(exact_test_pvals<=alpha)
(sum(exact_test_pvals<=alpha) / ncol(count_matrix)) * 100
ncol(count_matrix)
alpha <- 0.05
count_matrix <- MakeCounts(geneticData.poly)
exact_test_pvals <- HWExactStats(count_matrix)
sum(exact_test_pvals<=alpha)
(sum(exact_test_pvals<=alpha) / nrow(count_matrix)) * 100
m <- 10
perm_test_pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
perm_test_pvals[i] <- HWPerm(count_matrix_10_first[i,], verbose=FALSE)$pval
}
perm_test_pvals
plot(perm_test_pvals, exact_test_pvals[:10])
m <- 10
perm_test_pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
perm_test_pvals[i] <- HWPerm(count_matrix_10_first[i,], verbose=FALSE)$pval
}
perm_test_pvals
plot(perm_test_pvals, exact_test_pvals[1:10])
exact_test_pvals[1:10]
m <- 10
perm_test_pvals <- 0*m
count_matrix_10_first <- MakeCounts(geneticData.poly[,1:m])[,1:3]
for (i in 1:nrow(count_matrix_10_first)) {
perm_test_pvals[i] <- HWPerm(count_matrix_10_first[i,], verbose=FALSE)$pval
}
perm_test_pvals
exact_test_pvals[1:10]
which.min(exact_test_pvals)
most_significant_SNP <- which.min(exact_test_pvals)
count_matrix[most_significant_SNP]
most_significant_SNP <- which.min(exact_test_pvals)
count_matrix
alpha <- 0.05
count_matrix <- MakeCounts(geneticData.poly)
exact_test_pvals <- HWExactStats(count_matrix)
sum(exact_test_pvals<=alpha)
(sum(exact_test_pvals<=alpha) / nrow(count_matrix)) * 100
# just ~2.7% are significant
most_significant_SNP <- which.min(exact_test_pvals)
count_matrix[[most_significant_SNP]]
most_significant_SNP
count_matrix
count_matrix[1,]
most_significant_SNP <- which.min(exact_test_pvals)
count_matrix[most_significant_SNP,]
most_significant_SNP <- which.min(exact_test_pvals)
count_matrix[most_significant_SNP,][,1:3]
most_significant_SNP <- which.min(exact_test_pvals)
count_matrix[most_significant_SNP,][1:3]
count_matrix <- MakeCounts(geneticData.poly[,1:m])[,1:3]
count_matrix <- MakeCounts(geneticData.poly)[,1:3]
count_matrix <- MakeCounts(geneticData.poly)[,1:3]
HWLratio(count_matrix)
count_matrix <- MakeCounts(geneticData.poly)[,1:3]
m <- nrow(count_matrix)
likelihood_ratio_test_pvals <- 0*m
for (i in 1:m) {
likelihood_ratio_test_pvals[i] <- HWLratio(count_matrix_10_first[i,], verbose=FALSE)$pval
}
count_matrix
count_matrix <- MakeCounts(geneticData.poly)[,1:3]
m <- nrow(geneticData.poly)
likelihood_ratio_test_pvals <- 0*m
for (i in 1:m) {
likelihood_ratio_test_pvals[i] <- HWLratio(count_matrix_10_first[i,], verbose=FALSE)$pval
}
count_matrix <- MakeCounts(geneticData.poly)[,1:3]
m <- nrow(geneticData.poly)
likelihood_ratio_test_pvals <- 0*m
for (i in 1:m) {
likelihood_ratio_test_pvals[i] <- HWLratio(count_matrix[i,], verbose=FALSE)$pval
}
count_matrix <- MakeCounts(geneticData.poly)[,1:3]
m <- nrow(geneticData.poly)
likelihood_ratio_test_pvals <- 0*m
for (i in 1:m) {
likelihood_ratio_test_pvals[i] <- HWLratio(count_matrix[i,], verbose=FALSE)$pval
}
likelihood_ratio_test_pvals
count_matrix <- MakeCounts(geneticData.poly)[,1:3]
m <- ncol(geneticData.poly)
likelihood_ratio_test_pvals <- 0*m
for (i in 1:m) {
likelihood_ratio_test_pvals[i] <- HWLratio(count_matrix[i,], verbose=FALSE)$pval
}
likelihood_ratio_test_pvals
count_matrix <- MakeCounts(geneticData.poly)[,1:3]
m <- ncol(geneticData.poly)
likelihood_ratio_test_pvals <- 0*m
for (i in 1:m) {
likelihood_ratio_test_pvals[i] <- HWLratio(count_matrix[i,], verbose=FALSE)$pval
}
alpha <- 0.05
sum(likelihood_ratio_test_pvals<=alpha)
(sum(likelihood_ratio_test_pvals<=alpha) / nrow(count_matrix)) * 100
